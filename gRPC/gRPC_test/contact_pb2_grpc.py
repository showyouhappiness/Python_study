# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import contact_pb2 as contact__pb2


class ContactStub(object):
    """定义一个服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendStatus = channel.stream_stream(
                '/Contact/sendStatus',
                request_serializer=contact__pb2.ClientMsg.SerializeToString,
                response_deserializer=contact__pb2.Result.FromString,
                )
        self.getTask = channel.unary_stream(
                '/Contact/getTask',
                request_serializer=contact__pb2.Empty.SerializeToString,
                response_deserializer=contact__pb2.ServerMsg.FromString,
                )
        self.tellResult = channel.stream_unary(
                '/Contact/tellResult',
                request_serializer=contact__pb2.Result.SerializeToString,
                response_deserializer=contact__pb2.Empty.FromString,
                )


class ContactServicer(object):
    """定义一个服务
    """

    def sendStatus(self, request_iterator, context):
        """客户端通信给服务端，通信方式可以随意选择，这里我选择第4种通信方式
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTask(self, request, context):
        """客户端发送一个空消息给服务端，服务端就能给客户端通信了
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def tellResult(self, request_iterator, context):
        """客户端接受完服务端消息处理完后，再告诉服务端。这个tellResult也可以不要，看具体需求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContactServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendStatus': grpc.stream_stream_rpc_method_handler(
                    servicer.sendStatus,
                    request_deserializer=contact__pb2.ClientMsg.FromString,
                    response_serializer=contact__pb2.Result.SerializeToString,
            ),
            'getTask': grpc.unary_stream_rpc_method_handler(
                    servicer.getTask,
                    request_deserializer=contact__pb2.Empty.FromString,
                    response_serializer=contact__pb2.ServerMsg.SerializeToString,
            ),
            'tellResult': grpc.stream_unary_rpc_method_handler(
                    servicer.tellResult,
                    request_deserializer=contact__pb2.Result.FromString,
                    response_serializer=contact__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Contact', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Contact(object):
    """定义一个服务
    """

    @staticmethod
    def sendStatus(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Contact/sendStatus',
            contact__pb2.ClientMsg.SerializeToString,
            contact__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Contact/getTask',
            contact__pb2.Empty.SerializeToString,
            contact__pb2.ServerMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def tellResult(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Contact/tellResult',
            contact__pb2.Result.SerializeToString,
            contact__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
